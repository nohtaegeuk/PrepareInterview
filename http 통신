1. 웹 통신 & Protocol : 인터넷 상에서의 통신을 말한다 / 많은 정보들이 주고받기에 인터넷에 엄격한 규약이 존재한다. 이것이 protocol이다.

2. Protocol의 종류 :  - 일반적인 프로토콜 : Http , Https
                      - TCP/IP : 프로토콜을 가지고 서버와 클라이언트 사이의 파일 전송을 하기 위한 프로토콜
                      - 파일 전송 프로토콜 : Telnet, SSH
                      - 보안된 소켓 통신을 위한 프로토콜 : SMTP
                      - 기타 : TCP/UDP , IP
                     
3. Http 프로토콜 : Hyper Text Transfer Protocol : Hyper Text를 전송하기 위한 프로토콜
                                                  여기서 Hyper Text란, 웹 문서를 구성하고 있는 언어, 즉 HTML을 의미한다.
                                                  
4. Http 통신 - Request & Response : 요청 Request, 응답 Response으로 이루어짐
              클라이언트가 서버에게 요청을 보냄
              서버는 요청에 대한 응답 결과를 줌
              클라이언트 사용자에게 응답 받은 결과를 보여줌
              

5. Request / Response 구조
 : HTTP Request Messsage : 요청라인, General Header, Request Header, Entity Header, CRLF, Body 여기서 요청 라인은 method,url,버젼
   HTTP Response Message : 상태라인, General Header, Request Header, Entity Header, CRLF, Body 여기서 상태 라인은 Http/버젼/응답코드
   
6. Http통신 - stateless
   Http통신은 state개념이 존재하지 않는다.
   통신을 주고 받아도 클라이언트와 서버는 연결되어 있는 것이 아니라 각각의 통신은 독립적이다.
   상태를 저장하지 않는다는 의미이다.(서로 요청한 것들을 기억하지 못한다.)
   그래서 로그인 같은 경우, 세션/저장소 같은 방식으로 이용하여 기억하는 것처럼 보이게 한다.
   
7. Http 패킷
  Http 통신은 요청을 보내고 응답을 받을 때 그 정보들을 패킷(packet)에 넣어 보낸다.
  패킷 구조 : Header / Body
  Header : 보내는 사람의 주소, 받는 사람의 주소, 패킷 생명시간
  Body : 실제 전달하고자 하는 내용
  
  
8. Http Request 구조
  Start Line(요청 내용) : http메소드
                          Request target : 요청의 의도를 담고 있음(GET, POST, DELETE, UPDATE)
                          Http ver : 버전에 따라 요청 메시지 구조나 데이터가 다를 수 있어서, version을 명시
  Header : HTTP 요청이 전송되는 목표 주소
  Body
  
 
9. Http Request 구조 - Http메소드
  GET : 요청 방식은 URI가 가진 정보를 검색하기 위해 서버 측에 요청하는 형태이다.
  POST : POST요청 방식은 요청에 폼 입력을 처리하기 위해 구성한 서버 측 스크립트 혹은 CGI 프로그램으로 구성되고 Form Action과 함께 전송되는데, 
          이 때 헤더 정보에 포함되지 않고 데이터 부분에 요청 정보가 들어가게 된다.
  PUT : POST와 유사한 전송 구조를 가지기 때문에 헤더 이외에 메시지가 함께 전송된다.
  DELETE : 원격지 웹 서버에 파일을 삭제하기 위해 사용되며, PUT과는 반대 개념의 메소드

10. Http Response구조 - 응답종류
  200 - 성공 / 400 - Bad Request

11. REST API
  REST / 웹의 장점을 최대한 활용할 수 있는 아키텍처
  
12. REST에는 4개의 속성이 있다.

  속성1 : 서버에 있는 모든 resource는 각 resource 당 클라이언트가 바로 접근 할 수 있는 고유 URI가 존재한다.
  속성2 : 모든 요청은 클라이언트가 요청할 때마다 필요한 정보를 주기 때문에 서버에서는 세션 정보를 보관할 필요가 없습니다.
          그렇기 때문에 서비스에 자유도가 높아지고 유연한 아키텍쳐 적응이 가능합니다.
  속성3 : HTTP메소드를 사용한다. / 모든 resource는 일반적으로 http 인터페이스인 GET, POST,PUT,DELETE 4개의 메소드로 접근 되어야 한다는 것
  속성4 : 서비스 내에 하나의 resource가 주변에 연관된 리소스들과 연결되어 표현이 된다.
  
  
  13. REST의 3가지 구성 : resource , method, message

  
              
